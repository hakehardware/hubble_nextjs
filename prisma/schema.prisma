// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id             Int      @id @default(autoincrement())
  name           String
  type           String
  level          Level
  containerAlias String
  containerId    String   @unique
  containerType  String
  data           Json
  eventTime      DateTime
  createdAt      DateTime @default(now())

  container Container @relation("ContainerToEvent", fields: [containerId], references: [id])

  @@index([eventTime])
}

enum Level {
  INFO
  WARN
  ERROR
}

model Container {
  id        String        @unique
  type      ContainerType
  alias     String
  status    String
  image     String
  startedAt DateTime
  ip        String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  node              Node?              @relation("ContainerToNode")
  farmer            Farmer?            @relation("ContainerToFarmer")
  clusterController ClusterController? @relation("ContainerToClusterController")
  clusterCache      ClusterCache?      @relation("ContainerToClusterCache")
  clusterFarmer     ClusterFarmer?     @relation("ContainerToClusterFarmer")
  clusterPlotter    ClusterPlotter?    @relation("ContainerToClusterPlotter")
  event             Event?             @relation("ContainerToEvent")
  nats              Nats?              @relation("ContainerToNats")
}

enum ContainerType {
  CLUSTER_PLOTTER
  CLUSTER_FARMER
  CLUSTER_CACHE
  CLUSTER_CONTROLLER
  FARMER
  NODE
  NATS
}

enum ContainerStatus {
  CREATED
  RESTARTING
  RUNNING
  REMOVING
  PAUSED
  EXITED
  DEAD
}

model Node {
  containerId String    @id @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  container   Container @relation("ContainerToNode", fields: [containerId], references: [id], onDelete: Cascade)
}

model Farmer {
  containerId String    @id @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  container   Container @relation("ContainerToFarmer", fields: [containerId], references: [id], onDelete: Cascade)
}

model ClusterController {
  containerId String    @id @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  container   Container @relation("ContainerToClusterController", fields: [containerId], references: [id], onDelete: Cascade)
}

model ClusterCache {
  containerId String    @id @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  container   Container @relation("ContainerToClusterCache", fields: [containerId], references: [id], onDelete: Cascade)
}

model ClusterFarmer {
  containerId String    @id @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  container   Container @relation("ContainerToClusterFarmer", fields: [containerId], references: [id], onDelete: Cascade)
}

model ClusterPlotter {
  containerId String    @id @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  container   Container @relation("ContainerToClusterPlotter", fields: [containerId], references: [id], onDelete: Cascade)
}

model Nats {
  containerId String    @id @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  container   Container @relation("ContainerToNats", fields: [containerId], references: [id], onDelete: Cascade)
}
